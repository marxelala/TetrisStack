#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TAM_FILA 5  // Tamanho da fila de peças

// Estrutura que representa uma peça
typedef struct {
    char tipo;  // 'I', 'O', 'T', 'L'
    int id;     // Identificador único
} Peca;

// Fila circular
typedef struct {
    Peca pecas[TAM_FILA];
    int inicio;   // Índice da primeira peça
    int fim;      // Índice da próxima posição livre
    int quantidade; // Número de peças na fila
} Fila;

// Função para gerar uma peça aleatória
Peca gerarPeca(int id) {
    char tipos[] = {'I', 'O', 'T', 'L'};
    Peca nova;
    nova.tipo = tipos[rand() % 4];
    nova.id = id;
    return nova;
}

// Inicializa a fila com peças
void inicializarFila(Fila *fila) {
    fila->inicio = 0;
    fila->fim = 0;
    fila->quantidade = 0;
    for (int i = 0; i < TAM_FILA; i++) {
        fila->pecas[i] = gerarPeca(i);
        fila->fim = (fila->fim + 1) % TAM_FILA;
        fila->quantidade++;
    }
}

// Exibe o estado da fila
void exibirFila(Fila *fila) {
    printf("\nFila de peças:\n");
    int count = 0;
    int i = fila->inicio;
    while (count < fila->quantidade) {
        printf("[%c %d] ", fila->pecas[i].tipo, fila->pecas[i].id);
        i = (i + 1) % TAM_FILA;
        count++;
    }
    printf("\n");
}

// Remove a peça da frente da fila (dequeue)
void jogarPeca(Fila *fila) {
    if (fila->quantidade == 0) {
        printf("Fila vazia! Nenhuma peça para jogar.\n");
        return;
    }
    printf("Jogando peça [%c %d]\n", fila->pecas[fila->inicio].tipo, fila->pecas[fila->inicio].id);
    fila->inicio = (fila->inicio + 1) % TAM_FILA;
    fila->quantidade--;
}

// Adiciona uma peça ao final da fila (enqueue)
void inserirPeca(Fila *fila, int id) {
    if (fila->quantidade == TAM_FILA) {
        printf("Fila cheia! Não é possível adicionar nova peça.\n");
        return;
    }
    fila->pecas[fila->fim] = gerarPeca(id);
    printf("Nova peça inserida [%c %d]\n", fila->pecas[fila->fim].tipo, fila->pecas[fila->fim].id);
    fila->fim = (fila->fim + 1) % TAM_FILA;
    fila->quantidade++;
}

int main() {
    Fila fila;
    int opcao;
    int proximoId = TAM_FILA; // ID da próxima peça que será gerada

    srand(time(NULL)); // Inicializa gerador de números aleatórios

    inicializarFila(&fila);

    do {
        exibirFila(&fila);
        printf("\nOpções de ação:\n");
        printf("1 - Jogar peça (dequeue)\n");
        printf("2 - Inserir nova peça (enqueue)\n");
        printf("0 - Sair\n");
        printf("Escolha: ");
        scanf("%d", &opcao);

        switch(opcao) {
            case 1:
                jogarPeca(&fila);
                break;
            case 2:
                inserirPeca(&fila, proximoId);
                proximoId++;
                break;
            case 0:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida! Tente novamente.\n");
        }
    } while(opcao != 0);

    return 0;
}

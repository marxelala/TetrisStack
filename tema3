#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TAM_FILA 5
#define TAM_PILHA 3

// Estrutura que representa uma peça
typedef struct {
    char tipo; // 'I', 'O', 'T', 'L'
    int id;    // Identificador único
} Peca;

// Fila circular
typedef struct {
    Peca pecas[TAM_FILA];
    int inicio;
    int fim;
    int quantidade;
} Fila;

// Pilha de reserva
typedef struct {
    Peca pecas[TAM_PILHA];
    int topo;
} Pilha;

// Função para gerar peça aleatória
Peca gerarPeca(int id) {
    char tipos[] = {'I', 'O', 'T', 'L'};
    Peca nova;
    nova.tipo = tipos[rand() % 4];
    nova.id = id;
    return nova;
}

// Inicializa a fila
void inicializarFila(Fila *fila) {
    fila->inicio = 0;
    fila->fim = 0;
    fila->quantidade = 0;
    for (int i = 0; i < TAM_FILA; i++) {
        fila->pecas[fila->fim] = gerarPeca(i);
        fila->fim = (fila->fim + 1) % TAM_FILA;
        fila->quantidade++;
    }
}

// Inicializa a pilha
void inicializarPilha(Pilha *pilha) {
    pilha->topo = -1;
}

// Exibe fila e pilha
void exibirEstado(Fila *fila, Pilha *pilha) {
    printf("\nFila de peças:\n");
    int count = 0;
    int i = fila->inicio;
    while (count < fila->quantidade) {
        printf("[%c %d] ", fila->pecas[i].tipo, fila->pecas[i].id);
        i = (i + 1) % TAM_FILA;
        count++;
    }
    printf("\n");

    printf("Pilha de reserva (Topo -> Base): ");
    if (pilha->topo == -1) {
        printf("(vazia)");
    } else {
        for (int j = pilha->topo; j >= 0; j--) {
            printf("[%c %d] ", pilha->pecas[j].tipo, pilha->pecas[j].id);
        }
    }
    printf("\n");
}

// Jogar peça da fila
Peca jogarPeca(Fila *fila) {
    Peca removida = {' ', -1};
    if (fila->quantidade == 0) {
        printf("Fila vazia! Nenhuma peça para jogar.\n");
        return removida;
    }
    removida = fila->pecas[fila->inicio];
    fila->inicio = (fila->inicio + 1) % TAM_FILA;
    fila->quantidade--;
    printf("Jogando peça [%c %d]\n", removida.tipo, removida.id);
    return removida;
}

// Reservar peça: da fila para pilha
void reservarPeca(Fila *fila, Pilha *pilha) {
    if (fila->quantidade == 0) {
        printf("Fila vazia! Nenhuma peça para reservar.\n");
        return;
    }
    if (pilha->topo == TAM_PILHA - 1) {
        printf("Pilha cheia! Não é possível reservar.\n");
        return;
    }
    Peca p = fila->pecas[fila->inicio];
    fila->inicio = (fila->inicio + 1) % TAM_FILA;
    fila->quantidade--;
    pilha->topo++;
    pilha->pecas[pilha->topo] = p;
    printf("Peça [%c %d] reservada.\n", p.tipo, p.id);
}

// Usar peça da pilha (pop)
void usarPecaReservada(Pilha *pilha) {
    if (pilha->topo == -1) {
        printf("Pilha vazia! Nenhuma peça para usar.\n");
        return;
    }
    Peca p = pilha->pecas[pilha->topo];
    pilha->topo--;
    printf("Usando peça reservada [%c %d]\n", p.tipo, p.id);
}

// Troca simples: frente da fila com topo da pilha
void trocarFrenteTopo(Fila *fila, Pilha *pilha) {
    if (fila->quantidade == 0 || pilha->topo == -1) {
        printf("Não há peças suficientes para trocar.\n");
        return;
    }
    Peca temp = fila->pecas[fila->inicio];
    fila->pecas[fila->inicio] = pilha->pecas[pilha->topo];
    pilha->pecas[pilha->topo] = temp;
    printf("Troca realizada entre frente da fila e topo da pilha.\n");
}

// Troca múltipla: 3 primeiros da fila com 3 da pilha
void trocarTres(Fila *fila, Pilha *pilha) {
    if (fila->quantidade < 3 || pilha->topo < 2) {
        printf("Não há peças suficientes para troca múltipla.\n");
        return;
    }
    for (int i = 0; i < 3; i++) {
        int idxFila = (fila->inicio + i) % TAM_FILA;
        int idxPilha = pilha->topo - i;
        Peca temp = fila->pecas[idxFila];
        fila->pecas[idxFila] = pilha->pecas[idxPilha];
        pilha->pecas[idxPilha] = temp;
    }
    printf("Troca múltipla realizada entre 3 peças da fila e 3 da pilha.\n");
}

int main() {
    Fila fila;
    Pilha pilha;
    int opcao;
    int proximoId = TAM_FILA;

    srand(time(NULL));

    inicializarFila(&fila);
    inicializarPilha(&pilha);

    do {
        exibirEstado(&fila, &pilha);

        printf("\nOpções disponíveis:\n");
        printf("1 - Jogar peça da frente da fila\n");
        printf("2 - Enviar peça da fila para a pilha de reserva\n");
        printf("3 - Usar peça da pilha de reserva\n");
        printf("4 - Trocar peça da frente da fila com topo da pilha\n");
        printf("5 - Trocar os 3 primeiros da fila com 3 peças da pilha\n");
        printf("0 - Sair\n");
        printf("Escolha: ");
        scanf("%d", &opcao);

        switch(opcao) {
            case 1:
                jogarPeca(&fila);
                break;
            case 2:
                reservarPeca(&fila, &pilha);
                break;
            case 3:
                usarPecaReservada(&pilha);
                break;
            case 4:
                trocarFrenteTopo(&fila, &pilha);
                break;
            case 5:
                trocarTres(&fila, &pilha);
                break;
            case 0:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida! Tente novamente.\n");
        }

        // Gera nova peça automaticamente se houver espaço na fila
        if (fila.quantidade < TAM_FILA) {
            fila.pecas[fila.fim] = gerarPeca(proximoId++);
            fila.fim = (fila.fim + 1) % TAM_FILA;
            fila.quantidade++;
        }

    } while(opcao != 0);

    return 0;
}
